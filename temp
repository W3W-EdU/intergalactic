  <AddFilterPattern.Select alwaysVisible={true} name='size' displayName='Size'  onChange={(v) => {
                setFilterData({ ...filterData, size: v });
              }}>
        <AddFilterPattern.Select.Trigger placeholder='language' onClear={() => {
                
                  clearField('size');
                }}/>
        <AddFilterPattern.Select.Menu>
        {sizes.map((item, idx) => (
                  <AddFilterPattern.Select.Option key={idx} value={item}>
                    {item}
                  </AddFilterPattern.Select.Option>
                ))}
          <AddFilterPattern.Select.Option>en</AddFilterPattern.Select.Option>
          <AddFilterPattern.Select.Option>de</AddFilterPattern.Select.Option>
        </AddFilterPattern.Select.Menu>
      </AddFilterPattern.Select>



}

class FilterPatternSelectItemRoot extends Component {
  static defaultProps = (props) => {
    return {
      visible: props.visible ?? true,
    };
  };

  uncontrolledProps = (props, context) => {
    return {
      visible: null,
    };
  };

  getTriggerProps() {
    return {
      onBlur: () => {
        // if need to close
        this.handlers.visible(false);
      },
    };
  }
  getPopperProps() {
    return {};
  }
  getMenuProps() {
    return {
      ref: this.menuRef,
    };
  }

  render() {
    return (
      <Root
        render={Select}
        visible={this.asProps.visible}
        onVisibleChange={this.handlers.visible}
      />
    );
  }
}

const FilterPatternSelectItem = createComponent(FilterPatternSelectItemRoot, {
  Trigger: Select.Trigger,
  Popper: Select.Popper,
  Option: Select.Option,
});

const AddFilterPattern = createComponent(RootAddFilterPattern, {
  Item: FilterPatternItem,
  Select: FilterPatternSelectItem,
  DropDownMenu: AddFilterDropDown,
  Clear,
});

export default AddFilterPattern;

const temp = ( <><AddFilterPattern.Item alwaysVisible={true} placeholder='Filter by name' name='name'>
  {(props) => {
    const { value, onChange, onClear, placeholder, name } = props;

    return (
      <Input w={160}>
        <Input.Addon>
          <SearchM />
        </Input.Addon>
        <Input.Value
          placeholder={placeholder}
          onChange={(v) => {
            onChange(v);
            setFilterData({ ...filterData, ...{ [name]: v } });
          } }
          aria-label='Filter by name' />
        {value && (
          <Input.Addon>
            <Hint
              tag={ButtonLink}
              use='secondary'
              addonLeft={CloseM}
              title='Clear'
              onClick={() => {
                clearField(name);
                onClear();
              } } />
          </Input.Addon>
        )}
      </Input>
    );
  } }
</AddFilterPattern.Item><AddFilterPattern.Item alwaysVisible={true} name='size' displayName='Size'>
    {({ value, name, displayName, onChange, onClear, placeholder }) => {
      return (
        <Select
          placehoder={placeholder}
          onChange={(v) => {
            onChange(v);
            setFilterData({ ...filterData, ...{ [name]: v } });
          } }
        >
          <Select.Trigger
            empty={!value}
            tag={FilterTrigger}
            onClear={() => {
              onClear();
              clearField(name);
            } }
          >
            {displayName}: {value}
          </Select.Trigger>
          <Select.Menu>
            {sizes.map((item, idx) => (
              <Select.Option key={idx} value={item}>
                {item}
              </Select.Option>
            ))}
          </Select.Menu>
        </Select>
      );
    } }
  </AddFilterPattern.Item></>)

      {/* {filters.map(({ id, name, displayName, options }) => {
        return (
          <AddFilterPattern.Item
            key={id}
            name={name}
            placeholder={displayName}
            displayName={displayName}
          >
            {(props) => {
              const {
                selectProps,
                selectMenuRef,
                shouldAutoFocus,
                onChange,
                onVisibleChange,
                selectVisible,
                onClear,
                placeholder,
                value,
              } = props;

              return (
                <Select
                  onVisibleChange={onVisibleChange}
                  visible={selectVisible}
                  placeholder={placeholder}
                  onChange={(v) => {
                    onChange(v);
                    setFilterData({ filterData, [name]: v });
                  }}
                >
                  <Select.Trigger
                    tag={FilterTrigger}
                    empty={!value}
                    onClear={onClear}
                    autoFocus={shouldAutoFocus}
                    {...selectProps}
                  >
                    {displayName}: {value}
                  </Select.Trigger>
                  <Select.Menu ref={selectMenuRef}>
                    {options.map((option, idx) => (
                      <Select.Option value={option} key={idx}>
                        {option}
                      </Select.Option>
                    ))}
                  </Select.Menu>
                </Select>
              );
            }}
          </AddFilterPattern.Item>
        );
      })} */}